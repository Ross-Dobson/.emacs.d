
* Packages

** melpa

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/" ) t)
(package-initialize)

#+END_SRC

* Variables for modes

** Display & Input

*** Description

Basic display & inputs:
- retain menu bar
- disable tool bar
- disable scroll bar
- disable splash screen
- disable backup files (PITA if using version control)
- enable line numbers everywhere
- enable column numbers too
- start in maximised window (NOT full screen)
- replace typing yes/no with y/n
- highlights the current line
- automatically closes opening brackets etc
- shows matching brackets/parens etc 
- remembers cursor position
- auto-polls for changes and refreshes in unedited files (e.g. outputs, logs)
- word wrapping forced to wrap whole words, not randomly halfway through
- cursor is bar rather than block
*** Code

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq make-backup-files nil)
(global-linum-mode 1)
(setq column-number-mode t)
(toggle-frame-maximized)
(defalias 'yes-or-no-p 'y-or-n-p)
(global-hl-line-mode 1)
(electric-pair-mode 1)
(show-paren-mode 1)
(savehist-mode 1)
(global-auto-revert-mode 1)
(global-visual-line-mode 1)
#+END_SRC

** ido

*** description
Interactive DO. Does neat things like autocomplete for loading files and buffers.

- enables ido mode
- sets ido for all buffers
- enables flexible matching, for names in any location
- guesses filenames if needed???
- create new buffers always
- sets preference order for files, sorted by extension

*** Code

#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-newbuffer 'always)
(setq ido-file-extension-order '(".py" ".ipynb" ".csv" ".txt" ".org" ".el"))
#+END_SRC

** Winner mode
*** Description
Allows window configurations to be cycled with C-c right and C-c left
*** Code
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
* Installed packages
** ido grid mode
*** Description
- ido suggestions in mini-buffer noww in grid form rather than having to cycle through single line
*** Code
#+BEGIN_SRC emacs-lisp
(ido-grid-mode 1)
#+END_SRC
** org bullets via superstar
#+BEGIN_SRC emacs-lisp
(org-superstar-mode)
#+END_SRC
** ivy & swiper & counsel
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
;(global-set-key (kbd "C-x C-f") 'counsel-find-file) ;; KEEP IDO MODE INSTEAD
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

** magit
*** Code
#+BEGIN_SRC emacs-lisp
(require 'magit)
#+END_SRC
** iedit
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC
** paredit
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(require 'paredit)
(paredit-mode 1)
#+END_SRC
** company
*** Description
- enables company mode after other stuffs loaded
- enables company mode everywhere
- company starts on the first character
- company has no delay
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(global-company-mode t)
(setq company-minimum-prefix-length 1)
(setq company-idle-delay 0)
#+END_SRC
** company-quickhelp
*** Description
- enable company quickhelp mode
- no delay on quikchelp
*** Code
#+BEGIN_SRC emacs-lisp
(company-quickhelp-mode 1)
(setq company-quickhelp-delay 0)
#+END_SRC
** anaconda
*** Description
- adds hooks
*** Code
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC
** company-anaconda
*** Description
- who even knows anymore
*** Code
#+BEGIN_SRC emacs-lisp
(add-to-list 'company-backends 'company-anaconda)
#+END_SRC
* Keybindings
** Description
When I think of a useful one, I'll add it here.
** Code
#+BEGIN_SRC emacs-lisp
#+END_SRC
