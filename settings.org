* Packages
** melpa
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/" ) t)

;; cursor-chg and ob-ein weren't on ELPA, so had to install manually:
(add-to-list 'load-path "~/.emacs.d/lisp/") ; Tell emacs where your personal elisp lib dir is

(package-initialize)

#+END_SRC
* Theme
** monokai-pro
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
    (progn
    ;; if graphic
    (add-hook 'after-init-hook 
	  (lambda () (load-theme 'monokai-pro t)))
	  ))
#+END_SRC
* Variables for modes
** Display & Input
*** Description
Basic display & inputs:
- retain menu bar
- disable tool bar
- disable scroll bar
- disable splash screen
- disable backup files (PITA if using version control)
- enable line numbers everywhere
- enable column numbers too
- start in maximised window (NOT full screen)
- replace typing yes/no with y/n
- highlights the current line
- automatically closes opening brackets etc
- shows matching brackets/parens etc 
- remembers cursor position
- auto-polls for changes and refreshes in unedited files (e.g. outputs, logs)
- word wrapping forced to wrap whole words, not randomly halfway through
- cursor is bar rather than block
*** Code
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq make-backup-files nil)
(global-linum-mode 1)
(setq column-number-mode t)
(toggle-frame-maximized)
(defalias 'yes-or-no-p 'y-or-n-p)
(global-hl-line-mode 1)
(electric-pair-mode 1)
(show-paren-mode 1)
(savehist-mode 1)
(global-auto-revert-mode 1)
(global-visual-line-mode 1)
#+END_SRC

** ido
*** Description
Interactive DO. Does neat things like autocomplete for loading files and buffers.

- enables ido mode
- sets ido for all buffers
- enables flexible matching, for names in any location
- guesses filenames if needed???
- create new buffers always
- sets preference order for files, sorted by extension

*** Code
#+BEGIN_SRC emacs-lisp
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(setq ido-use-filename-at-point 'guess)
(setq ido-create-newbuffer 'always)
(setq ido-file-extension-order '(".py" ".ipynb" ".csv" ".txt" ".org" ".el"))
#+END_SRC

** Winner mode
*** Description
Allows window configurations to be cycled with C-c right and C-c left
*** Code
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
* Installed packages
** elpy
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(elpy-enable) ; enables elpy, in order that we can set this stuff.
(add-to-list 'python-shell-completion-native-disabled-interpreters
			  "jupyter")
(setq python-shell-interpreter "jupyter"
      python-shell-interpreter-args "console --simple-prompt"
      python-shell-prompt-detect-failure-warning nil)

(elpy-disable) ; disables elpy again in case editing non .py files

(advice-add 'python-mode :before 'elpy-enable) ; waits until we're in python mode again to load elpy
(defalias 'workon 'pyvenv-workon) ; saves me typing "SPC+workon" rather than just "workon". Holy moly, am I lazy or what?
#+END_SRC
** ido grid mode
*** Description
- ido suggestions in mini-buffer noww in grid form rather than having to cycle through single line
*** Code
#+BEGIN_SRC emacs-lisp
(ido-grid-mode 1)
#+END_SRC
** org-superstar
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(require 'org-superstar)
(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** org bullets via superstar
#+BEGIN_SRC emacs-lisp
(org-superstar-mode)
#+END_SRC
** ivy & swiper & counsel
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
;(global-set-key (kbd "C-x C-f") 'counsel-find-file) ;; KEEP IDO MODE INSTEAD
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

** magit
*** Code
#+BEGIN_SRC emacs-lisp
(require 'magit)
#+END_SRC
** iedit
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC
** paredit
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(require 'paredit)
(paredit-mode 1)
#+END_SRC
** company
*** Description
- enables company mode after other stuffs loaded
- enables company mode everywhere
- company starts on the first character
- company has no delay
*** Code
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(global-company-mode t)
(setq company-minimum-prefix-length 1)
(setq company-idle-delay 0)
#+END_SRC
** company-quickhelp
*** Description
- enable company quickhelp mode
- no delay on quikchelp
*** Code
#+BEGIN_SRC emacs-lisp
(company-quickhelp-mode 1)
(setq company-quickhelp-delay 1)
#+END_SRC
** anaconda
*** Description
- adds hooks
*** Code
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC
** company-anaconda
*** Description
- who even knows anymore
*** Code
#+BEGIN_SRC emacs-lisp
(add-to-list 'company-backends 'company-anaconda)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)

(defun check-expansion ()
   (save-excursion
     (if (looking-at "\\_>") t
       (backward-char 1)
       (if (looking-at "\\.") t
         (backward-char 1)
         (if (looking-at "->") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))

(global-set-key [kbd "M-z"] 'tab-indent-or-complete)

#+END_SRC
** yasnippet snippets
** all-the-icons
*** Description
- initializes all-the-icons
- adds icons to dired mode
*** Code
#+BEGIN_SRC emacs-lisp
(require 'all-the-icons)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC
** all-the-icons-ivy
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(all-the-icons-ivy-setup)
#+END_SRC
** all-the-icons-ivy-rich
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(all-the-icons-ivy-rich-mode 1)
#+END_SRC
** all-the-icons-dired
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC
** doom-modeline
*** Description
A better looking modeline (the status bar along the bottom of each frame)
- checks for package
- initializes package
*** Code
#+BEGIN_SRC emacs-lisp
(require 'doom-modeline)
(doom-modeline-mode 1)
#+END_SRC
** projectile
*** Description
Manages projects, works from .git files but can just define a .projectile file anywhere
- starts projectile mode
- defines keyboard shortcuts
*** Code
#+BEGIN_SRC emacs-lisp
(require 'projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
** page-break-lines
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(global-page-break-lines-mode t)
#+END_SRC
** dashboard
*** Description
*** Code
#+BEGIN_SRC emacs-lisp
(require 'dashboard)
(dashboard-setup-startup-hook)
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

;; Set the title
(setq dashboard-banner-logo-title "Welcome to Emacs!")
;; Set the banner
(setq dashboard-startup-banner "/home/rsd/Pictures/emacs_logo.png")
;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners
;; "path/to/your/image.png" which displays whatever image you would prefer

;; Show navigator below the banner
(setq dashboard-set-navigator t)

;; Format: "(icon title help action face prefix suffix)"
(setq dashboard-navigator-buttons
      `(;; line1
        ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0) "Github" "Browse github" (lambda (&rest _) (browse-url "https://github.com/Ross-Dobson")))
        ("â˜…" "Moodle" "Show Moodle" (lambda (&rest _) (browse-url "https://moodle.ucl.ac.uk")))
	(,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0) "LinkedIn" "Browse LinkedIn" (lambda (&rest _) (browse-url "https://linkedin.com")))

	)))
#+END_SRC
** cursor-chg
*** Description
This package isn't on melpa, and had to be installed manually.
*** Code
#+BEGIN_SRC emacs-lisp
(require 'cursor-chg)  ; Load the library
(toggle-cursor-type-when-idle 1) ; Turn on cursor change when Emacs is idle
#+END_SRC
** ob-ein
*** Description
Org mode for EIN (I think). Not on Melpa!
*** Code
#+BEGIN_SRC emacs-lisp
(require 'ob-ein)
#+END_SRC
** treemacs
*** Description
Treemacs provides a neat heirarchical view of projects.
- load treemacs
- keybinding set here as well globally? idk anymore
- dpi icon change, currently unused
- set various modes
- don't shit the bed if bits are missing
- set keybinds globally
*** Code
#+BEGIN_SRC emacs-lisp
(require 'treemacs)
(with-eval-after-load 'winum
define-key winum-keymap (kbd "M-0") #'treemacs-select-window)

;; The default width and height of the icons is 22 pixels. If you are
;; using a Hi-DPI display, uncomment this to double the icon size.
;;(treemacs-resize-icons 44)

(treemacs-follow-mode t)
(treemacs-filewatch-mode t)
(treemacs-fringe-indicator-mode t)
(pcase (cons (not (null (executable-find "git")))
(not (null treemacs-python-executable)))
(`(t . t)
(treemacs-git-mode 'deferred))
(`(t . _)
(treemacs-git-mode 'simple)))
(define-key global-map (kbd "M-0") 'treemacs-select-window)
(define-key global-map (kbd "C-x t 1") 'treemacs-delete-other-windows)
(define-key global-map (kbd "C-x t t") 'treemacs)
(define-key global-map (kbd "C-x t B") 'treemacs-bookmark)
(define-key global-map (kbd "C-x t C-t") 'treemacs-find-file)
(define-key global-map (kbd "C-x t M-t") 'treemacs-find-tag)
#+END_SRC
** treemacs-projectile
*** Description
Treemacs integration with projectile project manager
*** Code
#+BEGIN_SRC emacs-lisp
(require 'treemacs-projectile)
#+END_SRC
** treemacs-dired
*** Description
Treemacs now talks to dired mode.
- use the package
- set the mode
*** Code
#+BEGIN_SRC emacs-lisp
(require 'treemacs-icons-dired)
(treemacs-icons-dired-mode)
#+END_SRC
** treemacs-magit
*** Description
Treemacs talks to magit
*** Code
#+BEGIN_SRC emacs-lisp
(require 'treemacs-magit)
#+END_SRC
* Keybindings
** Description
When I think of a useful one, I'll add it here.
** Code
#+BEGIN_SRC emacs-lisp
#+END_SRC
